class TranscriptionResults:
    # Initialize TranscriptionResults Object. Assigns the input variables to the class attributes.
    # 
    # Class attributes:  
    # ids: Contains the IDs from the database table where the transcription results are stored. 
    # originalSentences: The Labels from the test dataset. 
    # originalSentanceIds: The IDs from the database table of the test dataset. 
    # transcripts: The transcripts generated by the TranscriptionService. 
    # 
    # Input: 
    # ids: Contains the IDs from the database table where the transcription results are stored. Default value = empty list. 
    # originalSentences: The Labels from the test dataset. Default value = empty list. 
    # originalSentanceIds: The IDs from the database table of the test dataset. Default value = empty list. 
    # transcripts: The transcripts generated by the TranscriptionService. Default value = empty list. 
    def __init__(self, ids=[], originalSentences=[], originalSentanceIds=[], transcripts=[]):
        self.ids = ids
        self.originalSentences = originalSentences
        self.originalSentanceIds = originalSentanceIds
        self.transcripts = transcripts

    # Adds a new pair of transcription result data to the class attributes. 
    # 
    # Input:
    # newOriginalSentanceId: The ID of the Label from the test dataset corresponding to the newTranscript. 
    # newTranscript: A transcript generated by the TranscriptionService. 
    def addTranscriptionResult(self, newOriginalSentanceId, newTranscript):
        self.originalSentanceIds.append(newOriginalSentanceId)
        self.transcripts.append(newTranscript)

    # Returns the ID for a given index from the ids class attribute.
    # 
    # Input:
    # index: Integer for identifing the desired entry. 
    # 
    # Return: 
    # The ID from the ids class attribute corressponding index number. 
    def getId(self, index):
        return self.ids[index]

    # Returns the original Sentence for a given index from the originalSentences class attribute.
    # 
    # Input:
    # index: Integer for identifing the desired entry. 
    # 
    # Return: 
    # The original Sentence from the originalSentences class attribute corressponding index number. 
    def getOriginalSentence(self, index):
        return self.originalSentences[index]

    # Returns the transcript for a given index from the transcripts class attribute.
    # 
    # Input:
    # index: Integer for identifing the desired entry. 
    # 
    # Return: 
    # The transcript from the transcripts class attribute corressponding index number. 
    def getTranscript(self, index):
        return self.transcripts[index]

    # Formats the transcription result data as SQLite-insert-query and returns it.
    # 
    # Return:
    # Transcription result data formated as SQLite-insert-query-string.  
    def getTranscriptionResultDataAsSqliteQuery(self):
        sqlQuery = "INSERT INTO TranscriptionResults (originalSentaceId, transcript) VALUES"
        for index in range(0, self.len()):
            sqlQuery += f"({self.originalSentanceIds[index]}, '{self.transcripts[index]}'),"
        return sqlQuery[:-1] + ";"

    # Returns the number of transcription results stored in the class attributes.
    # 
    # Return:
    # Number of transcription results stored in the class attributes as integer. 
    def len(self):
        return len(self.transcripts)
